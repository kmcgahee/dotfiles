# Notes:
#  bind is alias for bind-key
#     -n means you don't need to use prefix
#     -r means key can repeat
#  send-prefix - tells window that the prefix key was pressed
#  "M-" is Alt


# use Ctrl+Space instead of Ctrl+b
set -g prefix C-Space

#unbind-key Tab

# Use the default shell
set-option -g default-shell $SHELL

# r for reloading .tmux.conf
bind r source-file ~/.tmux.conf \; display "tmux conf reloaded!"

# Remap window navigation to vim
unbind-key j
bind-key -n C-j select-pane -D
unbind-key k
bind-key -n C-k select-pane -U
unbind-key h
bind-key -n C-h select-pane -L
unbind-key l
bind-key -n C-l select-pane -R

# Be able to use mouse to scroll in "Copy mode"
# Above v1.5 will auto switch to copy mode
set -g mouse on

# Use vim movements for moving in copy mode
setw -g mode-keys vi

# Hit prefix+[ to enter copy mode, then hit space to start a selection,
# and instead of hitting ENTER, hit y which will pipe ouput to system clipboard
# OLD COMMAND: bind -t vi-copy y copy-pipe 'xclip -in -selection clipboard'
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'

# 256 color support
set -g default-terminal "screen-256color"

set-option -g history-limit 4000

# set split window keys
# (note this requires prefix keys)
bind-key l split-window -h -c "#{pane_current_path}"
bind-key h split-window -h -c "#{pane_current_path}"
bind-key j split-window -v -c "#{pane_current_path}"
bind-key k split-window -v -c "#{pane_current_path}"

# Start new window at same path
bind c new-window -c "#{pane_current_path}"

# Resize panes like vim
bind < resize-pane -L 20
bind > resize-pane -R 20
bind - resize-pane -D 20
bind + resize-pane -U 20

# status bar format
set -g status-position top
set -g status-style fg=yellow,bg=colour17
# set -g status-attr default # KLM COMMENTED OUT WHEN UPGRADING because already have a status-style
set -g status-fg white
set -g status-interval 5
set -g status-left-length 90
set -g status-right-length 60
set -g status-justify left
set -g status-right '#[fg=Cyan]#S #[fg=white]%a %d %b %R' 

# window format
win_fmt=' #{?window_zoomed_flag,[ZOOM] ,}#{?pane_in_mode,[COPY] ,}#I:#W #T '
setw -g window-status-format "$win_fmt"
setw -g window-status-current-format "$win_fmt"
setw -g window-status-style fg=colour12,bg=default
setw -g window-status-current-style fg=colour12,bg=colour18

# pane border
set -g pane-border-style fg=colour21
set -g pane-active-border-style fg=colour240,bg=default

# message text - good
set -g message-style bg=colour235,fg=yellow

set -g status-interval 1
set -g status-justify left # left align window list
set -g status-left-length 20
set -g status-right-length 140
set -g status-left ""
set -g status-right '#[fg=blue]#S  #[fg=colour15]#(date -u "+%%a %%b %%d %%H:%%M UTC")#[default]  #{?$SSH_CONNECTION,#[fg=green]#H#[default],local}'

# Start numbering at 1
set -g base-index 1
set -g renumber-windows on

##########################################################################################

# Allows for faster key repetition
set -sg escape-time 0

# Too fast for tmux
set -sg repeat-time 0

# Used in bind commands below
is_vim='echo "#{pane_current_command}" | egrep -iqe "(^|\/)g?(view|n?vim?)(diff)?$"'

# No confirmation on kill-pane or kill-window
bind x if "$is_vim" "send-keys C-x" kill-pane # vim-tmux killpane
bind / run "kill -9 #{pane_pid}" # force-quit pane

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# After upgrading I used:
bind -n 'C-h' if-shell "$is_vim" "send-keys 'C-h'" "select-pane -L"
bind -n 'C-j' if-shell "$is_vim" "send-keys 'C-j'" "select-pane -D"
bind -n 'C-k' if-shell "$is_vim" "send-keys 'C-k'" "select-pane -U"
bind -n 'C-l' if-shell "$is_vim" "send-keys 'C-l'" "select-pane -R"
bind -n 'C-\' if-shell "$is_vim" "send-keys 'C-\\'" "select-pane -l"
# BEFORE upgrade to BFR laptop I used these
# bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
# bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
# bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
# bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
# bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
